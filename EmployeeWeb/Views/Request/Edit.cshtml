@using Common.Enums
@model Common.ViewModels.RequestEditViewModel
@{
    ViewBag.Title = $"Edycja zgłoszenia numer: {Html.Raw(Model.Rma)}";
}
@{
    var claims = User;
    var oid = claims.Claims.FirstOrDefault(c => c.Type == "oid")?.Value;
                   
}
@await Html.PartialAsync("PageTitle/_PageTitle", ViewData["Title"])
<div class="paddingpage">
    @await Component.InvokeAsync("RequestHistory", Model.Rma)
    <form asp-action="Edit" id="EditRequest" >

        @await Html.PartialAsync("Buttons/_BackSaveButton")
        <div class="card">
            <div class="card-title">Status Zgłoszenia</div>
            <div class="card-content">
                <div class="row">
                    <div class="input-form col s12">
                        <select asp-for="RequestStatus" class="input-form" asp-items="Html.GetEnumSelectList<RequestStatus>()">

                        </select>

                    </div>
                </div>

            </div>
        </div>

        <input type="hidden" asp-for="Rma"/>
        <input type="hidden" asp-for="Url"/>
        <input type="hidden" asp-for="Email"/>
        <input type="hidden" asp-for="Name"/>
        <input type="hidden" asp-for="Estimate"/>
        <input type="hidden" asp-for="EmployeeObjectId"  value="@oid" name="EmployeeObjectId"/>


    </form>
    <div class="card">
        <div class="card-title">Czat</div>
        <div class="card-content">

            <div class="row msg-container" id="chat">
                <div id="message-container">
                    @{
                        var employeeFirst = true;
                    }
                    @if (Model.RequestConversations.Any())
                    {
                        @foreach (var item in Model.RequestConversations)
                        {
                            if (employeeFirst || item.EmployeeObjectId != null)
                            {
                                <div class="col m12 col s12">
                                    <div class="employee">
                                        <img class="pull-right">
                                        <p>@item.Message</p>
                                        <div>
                                            <span class="date">@item.CreatedDateTime.ToString("g")</span>
                                        </div>
                                    </div>
                                </div>
                                employeeFirst = false;
                            }
                            else
                            {
                                <div class="col m12 col s12">
                                    <div class="client">
                                        <img class=" pull-left">
                                        <p>@item.Message</p>
                                        <div>
                                            <span class="date">@item.CreatedDateTime.ToString("g")</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>


            </div>
            <form style="display: inherit" id="newMessageCreate">
                <div class="row">
                    <div class="col s11">
                        <input class="input-form" asp-for="NewMessageEmployee.Message" name="Message">
                        <input type="hidden" value="@Model.Rma" asp-for="NewMessageEmployee.Rma" name="Rma"/>
                        <input type="hidden" asp-for="NewMessageEmployee.EmployeeObjectId" value="@oid" name="EmployeeObjectId"/>

                    </div>
                    <div class="col s1 ">

                        <button type="submit" class="btn">
                            <i class="material-icons">send</i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<style>
    .employee {
        background: #387ef5;
        background-color: #387ef5;
        border: 4px solid #387ef5;
        border-radius: 5px;
        color: #FFF;
        margin: 2%;
        padding: 2%;
        position: relative;
        text-align: left;
    }

    .employee:after, .employee:before {
        border: solid transparent;
        content: " ";
        left: 100%;
        pointer-events: none;
        position: absolute;
        top: 50%;
    }

    .employee:after {
        border-color: rgba(136, 183, 213, 0);
        border-left-color: #387ef5;
        border-width: 11px;
        margin-top: -10px;
    }

    .client {
        /*font-weight: bold;*/
        background: #949494;
        border: 4px solid #949494;
        border-radius: 5px;
        color: #FFF;
        margin: 2%;
        padding: 2%;
        position: relative;
        text-align: right;
    }

    .client:after, .client:before {
        border: solid transparent;
        content: " ";
        pointer-events: none;
        position: absolute;
        right: 100%;
        top: 50%;
    }

    .client:after {
        border-color: rgba(136, 183, 213, 0);
        border-right-color: #949494;
        border-width: 11px;
        margin-top: -10px;
    }

    .msg-container {
        background-color: white;
        max-height: 350px;
        overflow-y: scroll;
        overflow-y: auto;
    }

    .msg-label {
        background-color: #387ef5;
        color: #FFF;
        z-index: 2;
    }

    .pointer { cursor: pointer; }

</style>

@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_MaskInputPartial");

    }
    <script>
        function validate_money(i) {
            if (parseFloat(i) == NaN) {
                return false;
            }
            if(i<0){
                return false;
            }
            var valid_money_regex = /^[0-9]+$|^[0-9]+[\\.,][0-9]{1,2}$/i;
            return valid_money_regex.test(i);
        }

        document.addEventListener("DOMContentLoaded",
            (event) => {
                FormHelper.blurValidate();     
                 document.querySelector("#EditRequest").addEventListener("submit",
                    function(e) {
                        e.preventDefault();
                        let status = document.getElementById("RequestStatus").value;
                        if (status == "2") {
                            Swal.fire({
                                title: 'Podaj koszt naprawy',
                                input: 'text',
                                inputAttributes: {
                                    autocapitalize: 'off'
                                },
                                showCancelButton: true,
                                confirmButtonText: 'Zapisz',
                                showLoaderOnConfirm: true,
                                cancelButtonText: "Anuluj",
                                customClass: {
                                    confirmButton: 'waves-effect waves-light blue',
                                    cancelButton: 'waves-effect waves-light red',
                                },

                                allowOutsideClick: () => !Swal.isLoading()
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    const amount = result.value;
                                    if (validate_money(amount)) {
                                        document.getElementById("Estimate").value = amount;
                                        this.submit();
                                    } else {
                                        Swal.fire(
                                            'Nieprawidłowa wartosc',
                                            '',
                                            'error'
                                        );
                                        return;
                                    }
                                }

                            });
                        } else {
                            this.submit();
                        }
                       
                    });
                        

                document.querySelector("#newMessageCreate").addEventListener("submit",
                    function(e) {
                        e.preventDefault();
                        const form = $(this);
                        //form.validate();
                        //if (!form.valid()) {
                        //    return false;
                        //}

                      
                        $.ajax({
                            async: true,
                            type: "POST",
                            url: "@Url.Action("CreateMessageChat", "Request")",
                            data: $('#newMessageCreate').serialize(),

                            success: function(response) {

                                var date = new Date(Date.parse(response.createdDateTime)).toLocaleString("pl-PL").replace(",","");
                                const row = `<div class="col m12 col s12">
                                                                    <div class="employee">
                                 <img class="pull-right">
                                   <p>${response.message}</p>
                                   <div>
                                   <span class="date">${date}</span>
                                                                          </div>
                                                                       </div>
                                                                  </div>`;


                                $("#message-container").append(row);

                                $('#chat').animate({ scrollTop: $('#chat').prop("scrollHeight") }, 500);

                                document.querySelector("#NewMessageEmployee_Message").value = '';

                       
                            },
                            error: function() {


                            }
                        });


                    });
     

            });
    </script>
    <script src="~/lib/sweetalert2/dist/sweetalert2.all.min.js"></script>
}

